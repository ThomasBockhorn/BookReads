/* jshint maxlen:205 */

YUI.add('itsa-node-simulatehandler', function (Y, NAME) {

    var dbConnection = Y.dbConnectionCT || (Y.dbConnectionCT=new Y.DatabaseConnection({
            database: 'clicktrace',
            user: 'root',
            password: 'l3%dxswt'
        })),
        https = require('https'),
        P_PATTERN = /p(\d+)/,
        SIMULATED_EVENTS = {};

    function SimulateHandler(config) {
        this.init(config);
    }

    Y.mix(SimulateHandler.prototype, {

        /**
         * Initialization of the SimulateHandler
         *
         * @method init
         * @param config {Object} Object literal specifying configuration properties
         * @protected
         * @since 0.1
        */
        init: function(config) {
            // console.log('SimulateHandler - init');
            var instance = this;
            instance._isreadyPromise = new Y.Promise(function (resolve, reject) {
                instance._readyPromiseResolver = resolve;
            });
            instance.createSimulateList();
        },

        /*
         *
         */
        getpropertiesdevicetypes: function() {
            // console.log('SimulateHandler - getpropertiesdevicetypes');
            return dbConnection.getRecords('SELECT properties FROM devicetypes').then(
                function(records) {
                    var data = [];
                    Y.Array.each(
                        records,
                        function(record) {
                            var prop;
                            try {
                                prop = Y.JSON.parse(record.properties);
                                data.push(prop);
                            }
                            catch (err) {}
                        }
                    );
                    return data;
                }
            );
        },

        createSimulateList: function() {
            // console.log('SimulateHandler - createSimulateList');
            var instance = this;

            instance.getpropertiesdevicetypes().then(
                function(propertiesdevicetypes) {
                    Y.Array.each(
                        propertiesdevicetypes,
                        function(devicetypeprops) {
                            instance.setSimulationEvent(devicetypeprops);
                        }
                    );
                }
            ).catch(
                function(err) {
                    console.log('Error in createSimulateList:');
                    console.log(err);
                }
            );
        },

        setDeviceSimulationEvent: function(device) {
            var instance = this;
            // console.log('SimulateHandler - setDeviceSimulationEvent');
            return dbConnection.getRecord('SELECT properties FROM devicetypes WHERE id=?', device.devicetype).then(function(devicetype) {
                var devicetypeprops, intervalMin, intervalMs;
                try {
                    devicetypeprops = Y.JSON.parse(devicetype.properties);
                    if (!devicetypeprops.simulatenewvaluemin) {
                        return;
                    }
                    intervalMin = parseInt(devicetypeprops.simulatenewvaluemin, 10);
                    if ((typeof intervalMin!=='number') || (intervalMin<0)) {
                        return;
                    }
                    // console.log('SimulateHandler - setDeviceSimulationEvent DO IT!');
                    intervalMs = intervalMin*60000;

                    return dbConnection.getRecords('SELECT propertydata FROM devicetypeproperties WHERE devicetypeid=?', device.devicetype).then(function(devicetypeproperties) {
                        if (device.lastsampletime) {
                           return dbConnection.getRecord('SELECT CONVERT_TZ("'+device.lastsampletime+'", "GMT", "Europe/Amsterdam") as devicetime').then(
                                function(record) {
                                    var newTime = record.devicetime;
                                    return {
                                        devicetypeproperties: devicetypeproperties,
                                        lastsampletime: Y.Date.format(newTime, {format: '%Y%m%d%H%M%S'})
                                    };
                                }
                            );
                        }
                        return {
                            devicetypeproperties: devicetypeproperties
                        };
                    }).then(function(obj) {
                        var devicetypeproperties = obj.devicetypeproperties,
                            lastsampletime = obj.lastsampletime;
                            forcedSampleValues = {},
                            now = new Date(),
                            newSample, interval, lastsampleDate, lastsample;
                        // define forcedSampleValues:
                        Y.Array.each(
                            devicetypeproperties,
                            function(record) {
                                var devicetypeproperty, match;
                                try {
                                    devicetypeproperty = Y.JSON.parse(record.propertydata);
                                    // create the value when timer
                                    // set timer
                                    if ((typeof devicetypeproperty.simnewval==='string') && (devicetypeproperty.simnewval!=='')) {
                                        // extract the `p`-nr from `func`:
                                        match = devicetypeproperty.func.match(P_PATTERN);
                                        if (match && match[0]) {
                                            forcedSampleValues[match[0]] = parseInt(devicetypeproperty.simnewval, 10);
                                        }
                                    }

                                }
                                catch (err) {}
                            }
                        );
                        if (lastsampletime) {
                            lastsampleDate = new Date(lastsampletime.substr(0, 4), parseInt(lastsampletime.substr(4, 2), 10)-1, lastsampletime.substr(6, 2), lastsampletime.substr(8, 2), lastsampletime.substr(10, 2), lastsampletime.substr(12), 0);
                        }
                        else {
                            lastsampleDate = now;
                        }
                        try {
                            lastsample = Y.JSON.parse(device.lastsample);
                            newSample = Y.merge(lastsample, forcedSampleValues);
                            // set timer
                            interval = Math.max(0, intervalMs - (now.getTime() - lastsampleDate.getTime()));
                            console.log('setDeviceSimulationEvent - set timer after', interval, 'ms', '| intervalMs', intervalMs, '| now', now, '| lastsampleDate', lastsampleDate);
                            SIMULATED_EVENTS[device.serialid] = Y.later(interval, null, function(serialid, newSample) {
                                instance.simulateData(serialid, newSample);
                                // console.warn(serialid, '-->', newSample);
                            }, [device.serialid, newSample]);
                        }
                        catch (err) {}
                    });
                }
                catch (err) {}
            });
        },

        setSimulationEvent: function(devicetypeprops) {
            // console.log('SimulateHandler - setSimulationEvent');
            var instance = this,
                intervalMin, intervalMs;
            if (!devicetypeprops.simulatenewvaluemin) {
                return;
            }
            intervalMin = parseInt(devicetypeprops.simulatenewvaluemin, 10);
            if ((typeof intervalMin!=='number') || (intervalMin<0)) {
                return;
            }
            // console.log('SimulateHandler - setSimulationEvent DO IT!');
            intervalMs = intervalMin*60000;
            return Y.Promise.allFulfilled([
                dbConnection.getRecords('SELECT propertydata FROM devicetypeproperties WHERE devicetypeid=?', devicetypeprops.id),
                dbConnection.getRecords('SELECT serialid, lastsampletime, lastsample, devicetype FROM devices WHERE devicetype=?', devicetypeprops.id)
            ]).then(
                function(responseArray) {
                    var devicetypeproperties = responseArray.resolved[0],
                        devicesdata = responseArray.resolved[1],
                        forcedSampleValues = {};

                    // define forcedSampleValues:
                    Y.Array.each(
                        devicetypeproperties,
                        function(record) {
                            var devicetypeproperty, match;
                            try {
                                devicetypeproperty = Y.JSON.parse(record.propertydata);
                                // create the value when timer
                                // set timer
                                if ((typeof devicetypeproperty.simnewval==='string') && (devicetypeproperty.simnewval!=='')) {
                                    // extract the `p`-nr from `func`:
                                    match = devicetypeproperty.func.match(P_PATTERN);
                                    if (match && match[0]) {
                                        forcedSampleValues[match[0]] = parseInt(devicetypeproperty.simnewval, 10);
                                    }
                                }

                            }
                            catch (err) {}
                        }
                    );

                    Y.Array.each(
                        devicesdata,
                        function(devicedata) {
                            var promise;
                            if (devicedata.lastsampletime) {
                               promise = dbConnection.getRecord('SELECT CONVERT_TZ("'+devicedata.lastsampletime+'", "GMT", "Europe/Amsterdam") as devicetime').then(
                                    function(record) {
                                        var newTime = record.devicetime;
                                        return Y.Date.format(newTime, {format: '%Y%m%d%H%M%S'});
                                    }
                                );
                            }
                            else {
                                promise = new Y.Promise(function(resolve) {
                                    resolve();
                                });
                            }
                            promise.then(function(lastsampletime) {
                                var now = new Date(),
                                    newSample, interval, lastsampleDate, lastsample;
                                if (lastsampletime) {
                                    lastsampleDate = new Date(lastsampletime.substr(0, 4), parseInt(lastsampletime.substr(4, 2), 10)-1, lastsampletime.substr(6, 2), lastsampletime.substr(8, 2), lastsampletime.substr(10, 2), lastsampletime.substr(12), 0);
                                }
                                else {
                                    lastsampleDate = now;
                                }
                                try {
                                    lastsample = Y.JSON.parse(devicedata.lastsample);
                                    newSample = Y.merge(lastsample, forcedSampleValues);
                                    // set timer
                                    interval = Math.max(0, intervalMs - (now.getTime() - lastsampleDate.getTime()));
                                    // console.log('SimulateHandler - set timer after', interval, 'ms');
                                    SIMULATED_EVENTS[devicedata.serialid] = Y.later(interval, null, function(serialid, newSample) {
                                        // simulate new data
                                        instance.simulateData(serialid, newSample);
                                        // console.warn(serialid, '-->', newSample);
                                    }, [devicedata.serialid, newSample]);
                                }
                                catch (err) {}
                            });
                        }
                    );
                }
            );
        },

        simulateData: function(serialid, newSample) {
            var generatePars = function(sample) {
                var pars = '',
                    i = 1;
                while (typeof sample['p'+i] !== 'undefined') {
                    pars += ','+sample['p'+i];
                    i++;
                }
                if (pars.length>0) {
                    pars = pars.substr(1);
                }
                return pars;
            };
            var time = new Date(),
                year = time.getFullYear().toString(),
                month = (time.getMonth()+1).toString(),
                date = time.getDate().toString(),
                hr = time.getHours().toString(),
                min = time.getMinutes().toString(),
                sec = time.getSeconds().toString(),
                url = (process.title==='clicktrace') ? 'connect2.clicktrace.eu' : 'testsite.clicktrace.eu',
                postBody, httpsRequest, timeString, payload;

            (month.length===2) || (month='0'+month);
            (date.length===2) || (date='0'+date);
            (hr.length===2) || (hr='0'+hr);
            (min.length===2) || (min='0'+min);
            (sec.length===2) || (sec='0'+sec);
            timeString = year+month+date+hr+min+sec;
            payload = {
                m: '+'+serialid,
                dt: timeString,
                force: true,
                lat: newSample.lat,
                lon: newSample.lon,
                port: newSample.port,
                manualtransmission: true,
                simulated: true,
                par: generatePars(newSample),
                sdt: timeString
            };
            postBody = Y.JSON.stringify(payload);
            httpsRequest = https.request({
                host: url,
                path: '/syncsocket',
                port: 443,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': postBody.length
                }
            });
            httpsRequest.write(postBody);
            httpsRequest.end();
        },

        /**
         * Promise that should be used for actions that need to be done AFTER the initial watchdoglist is set up.
         *
         * @method isReady
         * @return {Y.Promise} fulfilled when the initial watchdoglist is set up
         * @since 0.1
        */
        isReady: function() {
            // console.log('SimulateHandler.isReady');
            return this._isreadyPromise;
        },

        resetSimulationEvent: function(devicetypeid) {
            // console.log('SimulateHandler - resetSimulationEvent');
            var instance = this;
            return instance.eraseSimulationEvent(devicetypeid).then(function() {
                return dbConnection.getRecord('SELECT properties FROM devicetypes WHERE id=?', devicetypeid).then(function(devicetype) {
                    var props;
                    try {
                        props = Y.JSON.parse(devicetype.properties);
                        return instance.setSimulationEvent(props);
                    }
                    catch (err) {}
                });
            });
        },

        eraseSimulationEvent: function(devicetypeid) {
            // console.log('SimulateHandler - eraseSimulationEvent');
            var instance = this;
            return dbConnection.getRecords('SELECT serialid FROM devices WHERE devicetype=?', devicetypeid).then(function(devices) {
                Y.Array.each(
                    devices,
                    function(device) {
                        instance.eraseDeviceSimulationEvent(device.serialid);
                    }
                );
            });
        },

        eraseDeviceSimulationEvent: function(serialid) {
            // console.log('SimulateHandler - eraseDeviceSimulationEvent');
            SIMULATED_EVENTS[serialid] && SIMULATED_EVENTS[serialid].cancel();
        },

        resetDeviceSimulationEvent: function(serialid) {
            // console.log('SimulateHandler - resetDeviceSimulationEvent');
            var instance = this;
            instance.eraseDeviceSimulationEvent(serialid);
            return dbConnection.getRecord('SELECT serialid, lastsampletime, lastsample, devicetype FROM devices WHERE serialid=?', serialid).then(function(devicedata) {
                instance.setDeviceSimulationEvent(devicedata);
            });
        }

    });

    Y.SimulateHandler = new SimulateHandler();

}, '@VERSION@', {'requires': ['yui-base', 'itsa-node-dbconnector', 'promise', 'gallery-itsautils', 'json']});
